from unittest.mock import MagicMock

from assertpy import assert_that, fail

from rabbitmqbaselibrary.common.exceptions import Unauthorised, ServerErrorException, NotFoundException, \
    NotValidPermissions, BadRequest, UserAlreadyExists
from rabbitmqbaselibrary.users.users import get_users, create_user, AUTOGENERATED, delete_user, add_permissions, \
    delete_permissions, get_permissions, is_present, safe_create_user
from ..common.fixtures import mock_response, mock_bad_response_with_status, fake_broker


def test_should_get_existing_users(mocker: MagicMock) -> None:
    response = mock_response([{'name': 'one-s'}, {'name': 'one-d'}])
    patch = mocker.patch('requests.get', return_value=response)
    result = get_users(broker=fake_broker())
    assert_that(result).is_equal_to(['one-s', 'one-d'])
    patch.assert_called_with(url='https://fake-broker/api/users', auth=('guest', 'guest'))


def test_should_raise_exception_when_get_users_but_401(mocker: MagicMock) -> None:
    response = mock_bad_response_with_status(401)
    patch = mocker.patch('requests.get', return_value=response)
    try:
        get_users(broker=fake_broker())
    except Unauthorised as e:
        assert_that(e.url).is_equal_to('https://fake-broker/api/users')
    patch.assert_called_with(url='https://fake-broker/api/users', auth=('guest', 'guest'))


def test_should_raise_exception_when_get_users_but_500(mocker: MagicMock) -> None:
    response = mock_bad_response_with_status(500)
    patch = mocker.patch('requests.get', return_value=response)
    try:
        get_users(broker=fake_broker())
    except ServerErrorException as e:
        assert_that(e.url).is_equal_to('https://fake-broker/api/users')
    patch.assert_called_with(url='https://fake-broker/api/users', auth=('guest', 'guest'))


def test_should_raise_exception_when_get_users_but_teapot(mocker: MagicMock) -> None:
    response = mock_bad_response_with_status(418)
    patch = mocker.patch('requests.get', return_value=response)
    try:
        get_users(broker=fake_broker())
    except Exception as e:
        assert_that(e.args[0]).is_equal_to(418)
    patch.assert_called_with(url='https://fake-broker/api/users', auth=('guest', 'guest'))


def test_should_create_user(mocker: MagicMock) -> None:
    response = mock_response({})
    patch = mocker.patch('requests.put', return_value=response)
    passwd = create_user(broker=fake_broker(), name='test-user', pass_flag=AUTOGENERATED, **{'tags': 'test'})
    assert_that(passwd).is_not_empty()
    assert_that(patch.call_args.kwargs).contains_entry({'url': 'https://fake-broker/api/users/test-user', })
    assert_that(patch.call_args.kwargs).contains_entry({'auth': ('guest', 'guest')})
    assert_that(patch.call_args.kwargs['json']).contains_entry({'tags': 'test'})


def test_should_create_user_with_a_given_password(mocker: MagicMock) -> None:
    response = mock_response({})
    patch = mocker.patch('requests.put', return_value=response)
    # noinspection PyTypeChecker
    passwd = create_user(broker=fake_broker(), name='test-user', pass_flag=(not AUTOGENERATED), **{'password': 'test'})
    assert_that(passwd).is_equal_to('test')
    assert_that(patch.call_args.kwargs).contains_entry({'url': 'https://fake-broker/api/users/test-user', })
    assert_that(patch.call_args.kwargs).contains_entry({'auth': ('guest', 'guest')})
    assert_that(patch.call_args.kwargs['json']).contains_key('password_hash')


def test_should_delete_user(mocker: MagicMock) -> None:
    response = mock_response({})
    patch = mocker.patch('requests.delete', return_value=response)
    delete_user(broker=fake_broker(), name='test-user')
    assert_that(patch.call_args.kwargs).contains_entry({'url': 'https://fake-broker/api/users/test-user', })
    assert_that(patch.call_args.kwargs).contains_entry({'auth': ('guest', 'guest')})


def test_should_delete_user_but_not_found(mocker: MagicMock) -> None:
    response = mock_bad_response_with_status(404)
    patch = mocker.patch('requests.delete', return_value=response)
    try:
        delete_user(broker=fake_broker(), name='test-user')
    except NotFoundException as e:
        assert_that(e.url).is_equal_to('https://fake-broker/api/users/test-user')
    assert_that(patch.call_args.kwargs).contains_entry({'url': 'https://fake-broker/api/users/test-user', })


def test_should_add_permissions_to_user(mocker: MagicMock) -> None:
    response = mock_response([])
    patch = mocker.patch('requests.put', return_value=response)
    add_permissions(broker=fake_broker(), vhost='test', user='test-user',
                    permissions={'read': '.*', 'configure': '.*', 'write': '.*'})
    patch.assert_called_with(url='https://fake-broker/api/permissions/test/test-user',
                             auth=('guest', 'guest'),
                             json={'read': '.*', 'configure': '.*', 'write': '.*'})


def test_should_raise_exception_when_add_permissions_but_not_complete(mocker: MagicMock) -> None:
    response = mock_response([])
    patch = mocker.patch('requests.put', return_value=response)
    try:
        add_permissions(broker=fake_broker(), vhost='test',
                        user='test-user', permissions={'read': '.*'})
    except NotValidPermissions as e:
        assert_that(e.permissions).is_equal_to({'read': '.*'})
    patch.assert_not_called()


def test_should_raise_exception_when_add_permissions_but_400(mocker: MagicMock) -> None:
    response = mock_bad_response_with_status(400)
    patch = mocker.patch('requests.put', return_value=response)
    try:
        add_permissions(broker=fake_broker(), vhost='test', user='test-user',
                        permissions={'read': '.NotValid', 'configure': '.*', 'write': '.*'})
    except BadRequest as e:
        assert_that(e.url).is_equal_to('https://fake-broker/api/permissions/test/test-user')

    patch.assert_called_with(json={'read': '.NotValid', 'configure': '.*', 'write': '.*'},
                             auth=('guest', 'guest'), url='https://fake-broker/api/permissions/test/test-user')


def test_should_raise_exception_when_add_permissions_but_500(mocker: MagicMock) -> None:
    response = mock_bad_response_with_status(500)
    patch = mocker.patch('requests.put', return_value=response)
    try:
        add_permissions(broker=fake_broker(), vhost='test', user='test-user',
                        permissions={'read': '.NotValid', 'configure': '.*', 'write': '.*'})
    except ServerErrorException as e:
        assert_that(e.url).is_equal_to('https://fake-broker/api/permissions/test/test-user')

    patch.assert_called_with(json={'read': '.NotValid', 'configure': '.*', 'write': '.*'},
                             auth=('guest', 'guest'), url='https://fake-broker/api/permissions/test/test-user')


def test_should_delete_permissions_to_user(mocker: MagicMock) -> None:
    response = mock_response([])
    patch = mocker.patch('requests.delete', return_value=response)
    delete_permissions(broker=fake_broker(), vhost='test', user='test-user')
    patch.assert_called_with(url='https://fake-broker/api/permissions/test/test-user',
                             auth=('guest', 'guest'))


def test_should_get_permissions_from_user(mocker: MagicMock) -> None:
    response = mock_response({'user': 'test-user', 'vhost': 'EA',
                              'configure': '.*', 'write': '.*', 'read': '.*'})
    patch = mocker.patch('requests.get', return_value=response)
    response = get_permissions(broker=fake_broker(), vhost='test', user='test-user')
    assert_that(response).is_equal_to({'user': 'test-user', 'vhost': 'EA',
                                       'configure': '.*', 'write': '.*', 'read': '.*'})
    patch.assert_called_with(url='https://fake-broker/api/permissions/test/test-user', auth=('guest', 'guest'))


def test_should_return_true_if_user_is_present(mocker: MagicMock) -> None:
    response = mock_response({'name': 'test-user'})
    patch = mocker.patch('requests.get', return_value=response)
    response = is_present(broker=fake_broker(), name='test-user')
    assert_that(response).is_true()
    patch.assert_called_with(url='https://fake-broker/api/users/test-user', auth=('guest', 'guest'))


def test_should_return_false_if_user_is_not_present(mocker: MagicMock) -> None:
    response = mock_response({'name': 'another-user'})
    patch = mocker.patch('requests.get', return_value=response)
    response = is_present(broker=fake_broker(), name='test-user')
    assert_that(response).is_false()
    patch.assert_called_with(url='https://fake-broker/api/users/test-user', auth=('guest', 'guest'))


def test_should_return_false_if_user_is_not_present_with_exception(mocker: MagicMock) -> None:
    response = mock_bad_response_with_status(404)
    patch = mocker.patch('requests.get', return_value=response)
    response = is_present(broker=fake_broker(), name='test-user')
    assert_that(response).is_false()
    patch.assert_called_with(url='https://fake-broker/api/users/test-user', auth=('guest', 'guest'))


def test_should_raise_exception_when_safe_create_user_but_it_already_exists(mocker: MagicMock) -> None:
    mocker.patch('requests.get', return_value=mock_response({'name': 'test-user'}))
    try:
        safe_create_user(broker=fake_broker(), name='test-user', pass_flag=AUTOGENERATED)
        fail()
    except UserAlreadyExists as e:
        assert_that(e.user).is_equal_to('test-user')


def test_should_create_user_when_safe_create_user_and_it_does_not_exist(mocker: MagicMock) -> None:
    mocker.patch('requests.get', return_value=mock_response({'name': 'some-other-user'}))
    patch = mocker.patch('requests.put', return_value=mock_response({}))
    try:
        passwd = safe_create_user(broker=fake_broker(), name='test-user', pass_flag=(not AUTOGENERATED),
                                  **{'password': 'test'})
        assert_that(passwd).is_equal_to('test')
        assert_that(patch.call_args.kwargs).contains_entry({'url': 'https://fake-broker/api/users/test-user', })
        assert_that(patch.call_args.kwargs).contains_entry({'auth': ('guest', 'guest')})
        assert_that(patch.call_args.kwargs['json']).contains_key('password_hash')
    except UserAlreadyExists:
        fail()
