import os

import pytest
from assertpy import assert_that, fail

from common.config import Config
from common.environments import Environments
from common.exceptions import NotFoundException
from users.users import create_user, AUTOGENERATED, delete_user, get_users, get_user_by_name, add_permissions, \
    get_permissions, delete_permissions

config = Config(os.path.join(os.path.dirname(__file__), '../../app.ini'))
envs = Environments(path_file=config.get_file_path('config_files', 'tme_environments.json'))


@pytest.mark.integration
def test_should_create_user_in_env() -> None:
    test_env: dict = envs.get_env(env='test')
    create_user(broker=test_env, name='test-user', pass_flag=AUTOGENERATED, **{'tags': 'test-script'})
    user = get_user_by_name(broker=test_env, name='test-user')
    assert_that(user).contains_entry({
        'hashing_algorithm': 'rabbit_password_hashing_sha256'
    })
    assert_that(user).contains_entry({
        'name': 'test-user'
    })
    assert_that(user).contains_entry({
        'tags': 'test-script'
    })
    add_permissions(broker=test_env, vhost='EA', user='test-user',
                    permissions={'configure': '.*', 'write': '.*', 'read': '.*'})
    permissions = get_permissions(broker=test_env, vhost='EA', user='test-user')
    assert_that(permissions).is_equal_to(
        {'user': 'test-user', 'vhost': 'EA',
         'configure': '.*', 'write': '.*', 'read': '.*'})
    delete_permissions(broker=test_env, vhost='EA', user='test-user')
    try:
        get_permissions(broker=test_env, vhost='EA', user='test-user')
        fail('it should raise exception')
    except NotFoundException as e:
        assert_that(e.url).ends_with('/api/permissions/EA/test-user')
    delete_user(broker=test_env, name='test-user')
    users = get_users(broker=test_env)
    assert_that(users).is_not_empty()
